volumes:
    php-fpm-sock:
    psysh-store:
    db-store:
    maildir: {}

services:
  proxy:
    container_name: proxy
    build:
      context: .
      dockerfile: ${DOCKERDIR}/nginx/Dockerfile
      args:
        - WORKDIR=${WORKDIR}
        - DOCKERDIR=${DOCKERDIR}
    ports:
      - target: 80
        protocol: tcp
        mode: host
        published: ${WEB_PORT:-80}
    volumes:
      - type: bind
        source: ./src
        target: ${WORKDIR}
      - type: volume
        source: php-fpm-sock
        target: /var/run/php-fpm
        volume:
          nocopy: true
  app:
    container_name: app
    build:
      context: .
      dockerfile: ${DOCKERDIR}/php/Dockerfile
      args:
        - WORKDIR=${WORKDIR}
        - DOCKERDIR=${DOCKERDIR}
    volumes:
      # 作業ファイルの同期
      - type: bind
        source: ./src
        target: ${WORKDIR}
      # unixドメインソケット通信
      - type: volume
        source: php-fpm-sock
        target: /var/run/php-fpm
        volume:
          nocopy: true
      # Laravel tinker（psysh）の履歴保持
      - type: volume
        source: psysh-store
        target: /root/.config/psysh
        volume:
          nocopy: true
    environment:
      - TZ=${TZ}
  db:
    container_name: db
    build:
      context: .
      dockerfile: ${DOCKERDIR}/mysql/Dockerfile
      args:
        - DOCKERDIR=${DOCKERDIR}
    ports:
      - target: 3306
        protocol: tcp
        mode: host
        published: ${DB_PORT:-3306}
    volumes:
      - type: volume
        source: db-store
        target: /var/lib/mysql
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TZ}
  mail:
    container_name: mail
    image: mailhog/mailhog
    ports:
      - "8025:8025"
    volumes:
      - maildir:/tmp
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /tmp
  storage:
    container_name: storage
    image: minio/minio:latest
    ports:
      - "9999:9999"
      - "9001:9001"
    volumes:
      - ${DOCKERDIR}/minio/export1:/export1
      - ${DOCKERDIR}/minio/export2:/export2
    entrypoint: sh
    command: -c "/usr/bin/minio server /export1 /export2 --address :9999 --console-address :9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}